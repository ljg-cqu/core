// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgtype"
)

const createFile = `-- name: CreateFile :one
INSERT INTO esign_files (file_id, file_name, doc_type, template_id, parent_file_ids, creator_id, simple_form_fields, file_size, file_body)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING file_id
`

type CreateFileParams struct {
	FileID           string       `json:"fileID"`
	FileName         string       `json:"fileName"`
	DocType          DocType      `json:"docType"`
	TemplateID       string       `json:"templateID"`
	ParentFileIds    []string     `json:"parentFileIds"`
	CreatorID        string       `json:"creatorID"`
	SimpleFormFields pgtype.JSONB `json:"simpleFormFields"`
	FileSize         int64        `json:"fileSize"`
	FileBody         []byte       `json:"fileBody"`
}

func (q *Queries) CreateFile(ctx context.Context, arg *CreateFileParams) (string, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.FileID,
		arg.FileName,
		arg.DocType,
		arg.TemplateID,
		arg.ParentFileIds,
		arg.CreatorID,
		arg.SimpleFormFields,
		arg.FileSize,
		arg.FileBody,
	)
	var file_id string
	err := row.Scan(&file_id)
	return file_id, err
}

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO esign_templates (template_id, template_name, doc_type, parent_template_ids, creator_id, struct_components, file_size, file_body)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING template_id
`

type CreateTemplateParams struct {
	TemplateID        string       `json:"templateID"`
	TemplateName      string       `json:"templateName"`
	DocType           DocType      `json:"docType"`
	ParentTemplateIds []string     `json:"parentTemplateIds"`
	CreatorID         string       `json:"creatorID"`
	StructComponents  pgtype.JSONB `json:"structComponents"`
	FileSize          int64        `json:"fileSize"`
	FileBody          []byte       `json:"fileBody"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg *CreateTemplateParams) (string, error) {
	row := q.db.QueryRow(ctx, createTemplate,
		arg.TemplateID,
		arg.TemplateName,
		arg.DocType,
		arg.ParentTemplateIds,
		arg.CreatorID,
		arg.StructComponents,
		arg.FileSize,
		arg.FileBody,
	)
	var template_id string
	err := row.Scan(&template_id)
	return template_id, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM esign_files
WHERE file_id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, fileID string) error {
	_, err := q.db.Exec(ctx, deleteFile, fileID)
	return err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE FROM esign_templates
WHERE template_id = $1
`

func (q *Queries) DeleteTemplate(ctx context.Context, templateID string) error {
	_, err := q.db.Exec(ctx, deleteTemplate, templateID)
	return err
}

const getFile = `-- name: GetFile :one
SELECT file_id, file_name, doc_type, template_id, parent_file_ids, creator_id, create_time, simple_form_fields, file_size, file_body FROM esign_files
WHERE file_id = $1 LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, fileID string) (EsignFile, error) {
	row := q.db.QueryRow(ctx, getFile, fileID)
	var i EsignFile
	err := row.Scan(
		&i.FileID,
		&i.FileName,
		&i.DocType,
		&i.TemplateID,
		&i.ParentFileIds,
		&i.CreatorID,
		&i.CreateTime,
		&i.SimpleFormFields,
		&i.FileSize,
		&i.FileBody,
	)
	return i, err
}

const getSimpleFormFields = `-- name: GetSimpleFormFields :one
SELECT simple_form_fields FROM esign_files
WHERE file_id = $1
`

func (q *Queries) GetSimpleFormFields(ctx context.Context, fileID string) (pgtype.JSONB, error) {
	row := q.db.QueryRow(ctx, getSimpleFormFields, fileID)
	var simple_form_fields pgtype.JSONB
	err := row.Scan(&simple_form_fields)
	return simple_form_fields, err
}

const getTemplate = `-- name: GetTemplate :one
SELECT template_id, template_name, doc_type, parent_template_ids, creator_id, create_time, struct_components, file_size, file_body FROM esign_templates
WHERE template_id = $1 LIMIT 1
`

func (q *Queries) GetTemplate(ctx context.Context, templateID string) (EsignTemplate, error) {
	row := q.db.QueryRow(ctx, getTemplate, templateID)
	var i EsignTemplate
	err := row.Scan(
		&i.TemplateID,
		&i.TemplateName,
		&i.DocType,
		&i.ParentTemplateIds,
		&i.CreatorID,
		&i.CreateTime,
		&i.StructComponents,
		&i.FileSize,
		&i.FileBody,
	)
	return i, err
}

const getTemplateID = `-- name: GetTemplateID :one
SELECT template_id FROM esign_files
WHERE file_id = $1
`

func (q *Queries) GetTemplateID(ctx context.Context, fileID string) (string, error) {
	row := q.db.QueryRow(ctx, getTemplateID, fileID)
	var template_id string
	err := row.Scan(&template_id)
	return template_id, err
}

const listFileIds = `-- name: ListFileIds :many
SELECT file_id FROM esign_files
`

func (q *Queries) ListFileIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listFileIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var file_id string
		if err := rows.Scan(&file_id); err != nil {
			return nil, err
		}
		items = append(items, file_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFileIdsByDocType = `-- name: ListFileIdsByDocType :many
SELECT file_id FROM esign_files
WHERE doc_type = $1
ORDER BY file_name
`

func (q *Queries) ListFileIdsByDocType(ctx context.Context, docType DocType) ([]string, error) {
	rows, err := q.db.Query(ctx, listFileIdsByDocType, docType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var file_id string
		if err := rows.Scan(&file_id); err != nil {
			return nil, err
		}
		items = append(items, file_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFiles = `-- name: ListFiles :many
SELECT file_id, file_name, doc_type, template_id, parent_file_ids, creator_id, create_time, simple_form_fields, file_size, file_body FROM esign_files
ORDER BY file_name
`

func (q *Queries) ListFiles(ctx context.Context) ([]EsignFile, error) {
	rows, err := q.db.Query(ctx, listFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EsignFile
	for rows.Next() {
		var i EsignFile
		if err := rows.Scan(
			&i.FileID,
			&i.FileName,
			&i.DocType,
			&i.TemplateID,
			&i.ParentFileIds,
			&i.CreatorID,
			&i.CreateTime,
			&i.SimpleFormFields,
			&i.FileSize,
			&i.FileBody,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplateIds = `-- name: ListTemplateIds :many
SELECT template_id FROM esign_templates
`

func (q *Queries) ListTemplateIds(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listTemplateIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var template_id string
		if err := rows.Scan(&template_id); err != nil {
			return nil, err
		}
		items = append(items, template_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplateIdsByDocType = `-- name: ListTemplateIdsByDocType :many
SELECT template_id FROM esign_templates
WHERE doc_type = $1
`

func (q *Queries) ListTemplateIdsByDocType(ctx context.Context, docType DocType) ([]string, error) {
	rows, err := q.db.Query(ctx, listTemplateIdsByDocType, docType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var template_id string
		if err := rows.Scan(&template_id); err != nil {
			return nil, err
		}
		items = append(items, template_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplates = `-- name: ListTemplates :many
SELECT template_id, template_name, doc_type, parent_template_ids, creator_id, create_time, struct_components, file_size, file_body FROM esign_templates
ORDER BY template_name
`

func (q *Queries) ListTemplates(ctx context.Context) ([]EsignTemplate, error) {
	rows, err := q.db.Query(ctx, listTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EsignTemplate
	for rows.Next() {
		var i EsignTemplate
		if err := rows.Scan(
			&i.TemplateID,
			&i.TemplateName,
			&i.DocType,
			&i.ParentTemplateIds,
			&i.CreatorID,
			&i.CreateTime,
			&i.StructComponents,
			&i.FileSize,
			&i.FileBody,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplatesByDocType = `-- name: ListTemplatesByDocType :many
SELECT template_id, template_name, doc_type, parent_template_ids, creator_id, create_time, struct_components, file_size, file_body FROM esign_templates
WHERE doc_type = $1
ORDER BY template_name
`

func (q *Queries) ListTemplatesByDocType(ctx context.Context, docType DocType) ([]EsignTemplate, error) {
	rows, err := q.db.Query(ctx, listTemplatesByDocType, docType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EsignTemplate
	for rows.Next() {
		var i EsignTemplate
		if err := rows.Scan(
			&i.TemplateID,
			&i.TemplateName,
			&i.DocType,
			&i.ParentTemplateIds,
			&i.CreatorID,
			&i.CreateTime,
			&i.StructComponents,
			&i.FileSize,
			&i.FileBody,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
