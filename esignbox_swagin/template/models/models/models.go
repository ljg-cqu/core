// Code generated by sqlc. DO NOT EDIT.

package models

import (
	"fmt"
	"time"

	"github.com/jackc/pgtype"
)

type FileStatus string

const (
	FileStatus0    FileStatus = "0-文件未上传"
	FileStatus1    FileStatus = "1-文件上传中"
	FileStatus2    FileStatus = "2-文件上传已完成"
	FileStatus3    FileStatus = "3-文件上传失败"
	FileStatus4Pdf FileStatus = "4-文件等待转pdf"
	FileStatus5Pdf FileStatus = "5-文件已转换pdf"
	FileStatus6    FileStatus = "6-加水印中"
	FileStatus7    FileStatus = "7-加水印完毕"
	FileStatus8    FileStatus = "8-文件转换中"
	FileStatus9    FileStatus = "9-文件转换失败"
)

func (e *FileStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FileStatus(s)
	case string:
		*e = FileStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FileStatus: %T", src)
	}
	return nil
}

type OperationType string

const (
	OperationTypeCreate OperationType = "create"
	OperationTypeUpdate OperationType = "update"
	OperationTypeDelete OperationType = "delete"
)

func (e *OperationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OperationType(s)
	case string:
		*e = OperationType(s)
	default:
		return fmt.Errorf("unsupported scan type for OperationType: %T", src)
	}
	return nil
}

type TemplateFileStatus string

const (
	TemplateFileStatus0    TemplateFileStatus = "0-未上传"
	TemplateFileStatus1PDF TemplateFileStatus = "1-未转换成PDF"
	TemplateFileStatus2    TemplateFileStatus = "2-已上传成功"
	TemplateFileStatus3PDF TemplateFileStatus = "3-已转换成PDF"
)

func (e *TemplateFileStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TemplateFileStatus(s)
	case string:
		*e = TemplateFileStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TemplateFileStatus: %T", src)
	}
	return nil
}

type AccountLoginLog struct {
	LoginID   int32     `json:"loginID"`
	LoginIp   string    `json:"loginIp"`
	LoginTime time.Time `json:"loginTime"`
}

type AccountOperationLog struct {
	OperationID   int32         `json:"operationID"`
	AccountID     string        `json:"accountID"`
	OperationType OperationType `json:"operationType"`
	OperationTime time.Time     `json:"operationTime"`
	OperationInfo pgtype.JSONB  `json:"operationInfo"`
}

type AdminAccount struct {
	AccountID   int32  `json:"accountID"`
	AccountName string `json:"accountName"`
	Password    string `json:"password"`
	Email       string `json:"email"`
}

type ContractFile struct {
	FileID                string       `json:"fileID"`
	FileName              string       `json:"fileName"`
	AccountID             string       `json:"accountID"`
	SimpleFormFields      pgtype.JSONB `json:"simpleFormFields"`
	TemplateID            string       `json:"templateID"`
	CreateTime            time.Time    `json:"createTime"`
	FileStatus            FileStatus   `json:"fileStatus"`
	DownloadUrl           string       `json:"downloadUrl"`
	DownloadUrlExpireTime time.Time    `json:"downloadUrlExpireTime"`
	PdfTotalPages         int32        `json:"pdfTotalPages"`
	FileSize              int64        `json:"fileSize"`
	FileBody              []byte       `json:"fileBody"`
}

type ContractTemplate struct {
	TemplateID            string             `json:"templateID"`
	TemplateName          string             `json:"templateName"`
	CreateTime            time.Time          `json:"createTime"`
	FileStatus            TemplateFileStatus `json:"fileStatus"`
	DownloadUrl           string             `json:"downloadUrl"`
	DownloadUrlExpireTime time.Time          `json:"downloadUrlExpireTime"`
	FileSize              int64              `json:"fileSize"`
	FileBody              []byte             `json:"fileBody"`
}

type CustomerAccount struct {
	AccountID   int32  `json:"accountID"`
	AccountName string `json:"accountName"`
	Password    string `json:"password"`
	Email       string `json:"email"`
}

type StructComponent struct {
	ComponentID   string       `json:"componentID"`
	TemplateID    string       `json:"templateID"`
	ComponentArgs pgtype.JSONB `json:"componentArgs"`
}
