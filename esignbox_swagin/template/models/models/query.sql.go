// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgtype"
)

const createContractFile = `-- name: CreateContractFile :one
INSERT INTO contract_files (file_id, file_name, account_id, simple_form_fields, template_id, download_url, pdf_total_pages, file_size, file_body)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING file_id
`

type CreateContractFileParams struct {
	FileID           string       `json:"fileID"`
	FileName         string       `json:"fileName"`
	AccountID        string       `json:"accountID"`
	SimpleFormFields pgtype.JSONB `json:"simpleFormFields"`
	TemplateID       string       `json:"templateID"`
	DownloadUrl      string       `json:"downloadUrl"`
	PdfTotalPages    int32        `json:"pdfTotalPages"`
	FileSize         int64        `json:"fileSize"`
	FileBody         []byte       `json:"fileBody"`
}

func (q *Queries) CreateContractFile(ctx context.Context, arg *CreateContractFileParams) (string, error) {
	row := q.db.QueryRow(ctx, createContractFile,
		arg.FileID,
		arg.FileName,
		arg.AccountID,
		arg.SimpleFormFields,
		arg.TemplateID,
		arg.DownloadUrl,
		arg.PdfTotalPages,
		arg.FileSize,
		arg.FileBody,
	)
	var file_id string
	err := row.Scan(&file_id)
	return file_id, err
}

const createStructComponent = `-- name: CreateStructComponent :one
INSERT INTO struct_components (component_id, template_id, component_args)
VALUES ($1, $2, $3)
RETURNING component_id
`

type CreateStructComponentParams struct {
	ComponentID   string       `json:"componentID"`
	TemplateID    string       `json:"templateID"`
	ComponentArgs pgtype.JSONB `json:"componentArgs"`
}

func (q *Queries) CreateStructComponent(ctx context.Context, arg *CreateStructComponentParams) (string, error) {
	row := q.db.QueryRow(ctx, createStructComponent, arg.ComponentID, arg.TemplateID, arg.ComponentArgs)
	var component_id string
	err := row.Scan(&component_id)
	return component_id, err
}

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO contract_templates (template_id, template_name, file_size, file_body)
VALUES ($1, $2, $3, $4)
RETURNING template_id
`

type CreateTemplateParams struct {
	TemplateID   string `json:"templateID"`
	TemplateName string `json:"templateName"`
	FileSize     int64  `json:"fileSize"`
	FileBody     []byte `json:"fileBody"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg *CreateTemplateParams) (string, error) {
	row := q.db.QueryRow(ctx, createTemplate,
		arg.TemplateID,
		arg.TemplateName,
		arg.FileSize,
		arg.FileBody,
	)
	var template_id string
	err := row.Scan(&template_id)
	return template_id, err
}

const deleteContractFile = `-- name: DeleteContractFile :exec
DELETE FROM contract_files
WHERE file_id = $1
`

func (q *Queries) DeleteContractFile(ctx context.Context, fileID string) error {
	_, err := q.db.Exec(ctx, deleteContractFile, fileID)
	return err
}

const deleteContractTemplate = `-- name: DeleteContractTemplate :exec
DELETE FROM contract_templates
WHERE template_id = $1
`

func (q *Queries) DeleteContractTemplate(ctx context.Context, templateID string) error {
	_, err := q.db.Exec(ctx, deleteContractTemplate, templateID)
	return err
}

const deleteStructComponent = `-- name: DeleteStructComponent :exec
DELETE FROM struct_components
WHERE component_id = $1
`

func (q *Queries) DeleteStructComponent(ctx context.Context, componentID string) error {
	_, err := q.db.Exec(ctx, deleteStructComponent, componentID)
	return err
}

const getContractFile = `-- name: GetContractFile :one
SELECT file_id, file_name, account_id, simple_form_fields, template_id, create_time, file_status, download_url, download_url_expire_time, pdf_total_pages, file_size, file_body FROM contract_files
WHERE file_id = $1 LIMIT 1
`

func (q *Queries) GetContractFile(ctx context.Context, fileID string) (ContractFile, error) {
	row := q.db.QueryRow(ctx, getContractFile, fileID)
	var i ContractFile
	err := row.Scan(
		&i.FileID,
		&i.FileName,
		&i.AccountID,
		&i.SimpleFormFields,
		&i.TemplateID,
		&i.CreateTime,
		&i.FileStatus,
		&i.DownloadUrl,
		&i.DownloadUrlExpireTime,
		&i.PdfTotalPages,
		&i.FileSize,
		&i.FileBody,
	)
	return i, err
}

const getStructComponent = `-- name: GetStructComponent :one
SELECT component_id, template_id, component_args FROM struct_components
WHERE component_id = $1 LIMIT 1
`

func (q *Queries) GetStructComponent(ctx context.Context, componentID string) (StructComponent, error) {
	row := q.db.QueryRow(ctx, getStructComponent, componentID)
	var i StructComponent
	err := row.Scan(&i.ComponentID, &i.TemplateID, &i.ComponentArgs)
	return i, err
}

const getStructComponentsByTemplateId = `-- name: GetStructComponentsByTemplateId :many
SELECT component_id, template_id, component_args FROM struct_components
WHERE template_id = $1
`

func (q *Queries) GetStructComponentsByTemplateId(ctx context.Context, templateID string) ([]StructComponent, error) {
	rows, err := q.db.Query(ctx, getStructComponentsByTemplateId, templateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StructComponent
	for rows.Next() {
		var i StructComponent
		if err := rows.Scan(&i.ComponentID, &i.TemplateID, &i.ComponentArgs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplate = `-- name: GetTemplate :one
SELECT template_id, template_name, create_time, file_status, download_url, download_url_expire_time, file_size, file_body FROM contract_templates
WHERE template_id = $1 LIMIT 1
`

func (q *Queries) GetTemplate(ctx context.Context, templateID string) (ContractTemplate, error) {
	row := q.db.QueryRow(ctx, getTemplate, templateID)
	var i ContractTemplate
	err := row.Scan(
		&i.TemplateID,
		&i.TemplateName,
		&i.CreateTime,
		&i.FileStatus,
		&i.DownloadUrl,
		&i.DownloadUrlExpireTime,
		&i.FileSize,
		&i.FileBody,
	)
	return i, err
}

const listContractFiles = `-- name: ListContractFiles :many
SELECT file_id, file_name, account_id, simple_form_fields, template_id, create_time, file_status, download_url, download_url_expire_time, pdf_total_pages, file_size, file_body FROM contract_files
ORDER BY file_name
`

func (q *Queries) ListContractFiles(ctx context.Context) ([]ContractFile, error) {
	rows, err := q.db.Query(ctx, listContractFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContractFile
	for rows.Next() {
		var i ContractFile
		if err := rows.Scan(
			&i.FileID,
			&i.FileName,
			&i.AccountID,
			&i.SimpleFormFields,
			&i.TemplateID,
			&i.CreateTime,
			&i.FileStatus,
			&i.DownloadUrl,
			&i.DownloadUrlExpireTime,
			&i.PdfTotalPages,
			&i.FileSize,
			&i.FileBody,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContractTemplates = `-- name: ListContractTemplates :many
SELECT template_id, template_name, create_time, file_status, download_url, download_url_expire_time, file_size, file_body FROM contract_templates
ORDER BY template_name
`

func (q *Queries) ListContractTemplates(ctx context.Context) ([]ContractTemplate, error) {
	rows, err := q.db.Query(ctx, listContractTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContractTemplate
	for rows.Next() {
		var i ContractTemplate
		if err := rows.Scan(
			&i.TemplateID,
			&i.TemplateName,
			&i.CreateTime,
			&i.FileStatus,
			&i.DownloadUrl,
			&i.DownloadUrlExpireTime,
			&i.FileSize,
			&i.FileBody,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContractFileDownloadUrl = `-- name: UpdateContractFileDownloadUrl :exec
UPDATE contract_files SET (download_url, download_url_expire_time) = ($2, $3)
WHERE file_id = $1
`

type UpdateContractFileDownloadUrlParams struct {
	FileID                string    `json:"fileID"`
	DownloadUrl           string    `json:"downloadUrl"`
	DownloadUrlExpireTime time.Time `json:"downloadUrlExpireTime"`
}

func (q *Queries) UpdateContractFileDownloadUrl(ctx context.Context, arg *UpdateContractFileDownloadUrlParams) error {
	_, err := q.db.Exec(ctx, updateContractFileDownloadUrl, arg.FileID, arg.DownloadUrl, arg.DownloadUrlExpireTime)
	return err
}

const updateContractTemplateDownloadUrl = `-- name: UpdateContractTemplateDownloadUrl :exec
UPDATE contract_templates SET (download_url, download_url_expire_time) = ($2, $3)
WHERE template_id = $1
`

type UpdateContractTemplateDownloadUrlParams struct {
	TemplateID            string         `json:"templateID"`
	DownloadUrl           sql.NullString `json:"downloadUrl"`
	DownloadUrlExpireTime time.Time      `json:"downloadUrlExpireTime"`
}

func (q *Queries) UpdateContractTemplateDownloadUrl(ctx context.Context, arg *UpdateContractTemplateDownloadUrlParams) error {
	_, err := q.db.Exec(ctx, updateContractTemplateDownloadUrl, arg.TemplateID, arg.DownloadUrl, arg.DownloadUrlExpireTime)
	return err
}

const updateStructComponent = `-- name: UpdateStructComponent :exec
UPDATE struct_components SET component_args = $2
WHERE component_id = $1
`

type UpdateStructComponentParams struct {
	ComponentID   string       `json:"componentID"`
	ComponentArgs pgtype.JSONB `json:"componentArgs"`
}

func (q *Queries) UpdateStructComponent(ctx context.Context, arg *UpdateStructComponentParams) error {
	_, err := q.db.Exec(ctx, updateStructComponent, arg.ComponentID, arg.ComponentArgs)
	return err
}
